newdata4[newdata4 == "HUGO ID"] = "#NON"
split_newdata4 <- newdata4[,1:24]	# Hälfte der Tabelle um mit kleineren Datensatz zu üben.
View(split_newdata4)
# Replace ID by "A-Z" in the first row of the data frame
a <- c("NON",LETTERS[seq(split_newdata4[1,2:ncol(split_newdata5)])])
# Replace ID by "A-Z" in the first row of the data frame
a <- c("NON",LETTERS[seq(split_newdata4[1,2:ncol(split_newdata4)])])
a
write.table(a, file = "/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/CSV2TXT.txt", quote = FALSE, row.names=FALSE, col.names = FALSE)
newdata3 <- read.table(file="/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/CSV2TXT.txt", fill= TRUE, header = F)
View(newdata3)
# add "NON" in first entry to get the same dimension as split_newdata5
x <- t(newdata3)
split_newdata4 <- data.matrix(split_newdata4, rownames.force = NA)
Data <- rbind(split_newdata4, x)
View(Data)
View(split_newdata4)
View(newdata4)
View(newdata3)
View(newdata2)
View(newdata)
View(Data)
a
View(newdata3)
####CSV to TXT-Parser####by Nina Kersten
#This R-Parser converts a .csv-file of a RPMA-Output to a .txt-file for inferring a boolean network with TS2B
#Up to 48 nodes can be calculated
#R version 3.4.3 (2017-11-30)
#install.packages("plyr")
#install.packages("data.table") #data.table_1.9.5
#install.packages("dplyr")
#install.packages("rPython")
library(plyr)
library(rPython)
library(RJSONIO)
#library(dplyr)
#library(data.table)
#>>>pip install praw :for using rPython
#ifelse(interactive()==FALSE,
#       askdir<- ask,
#       askdir <- readline(prompt="Please enter the directory to the ./CSV -folder:")
#)
#askdir <-function(){
#  toString(readline("Please enter the directory to the ./CSV -folder:"))
#}
#input_askdir <- askdir()
#print(input_askdir)
#askdir2 <-function(){
#  toString(readline("Please enter the directory to the ./CSV -folder:"))
#}
#input_askdir2 <- askdir2()
#print(input_askdir)
myfunction <- function(askdir, askdir2){
askdir <- readline(prompt = "Please enter the directory to the ./CSV -folder:")
askdir2<- readline(prompt = "Please enter the directory to the ./CSV -folder:")
#/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/Pipeline/CSV/
#python.load("/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/Pipeline/rPythonscript.py")
#system('python /home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/Pipeline/rPythonscript.py', wait = FALSE)
#askdir2 <- readline(prompt = "Please enter the directory to the \"./TS2B/BooleanModeling2post/\" -folder  :")
#"/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/"
setwd(askdir2)
celllinelist <- c("BT20_main","BT549_main","MCF7_main","UACC812_main")
#read-in the data, exlude SlideID, Antibody Name
for (d in celllinelist){
newdata <- read.csv(file=paste(askdir,d,".csv", sep=""), header=FALSE, skip = 2, sep = ",", dec = ".", stringsAsFactors = FALSE)
stimulilist<- c("Insulin", "IGF1", "FGF1", "EGF", "HGF" , "Serum", "NRG1" , "PBS") # List of all stimuli (pertubation parameter) used in the experiments in each cell line
for (i in stimulilist){
newdata2 <- subset(newdata, newdata$V4 == "0min" | newdata$V3 == i) # filter out the measurements of one cell line in combination with the 0-measurements and one of the pertubation parameters
#newdata2 <- newdata[match(stimulilist, newdata), ]
#newdata2 <- subset(newdata, newdata$V3 %in% stimulilist | newdata$V4== "0min")
#newdata$V3 <- rownames(newdata)
#newdata2 <- subset(newdata, V4 == "0min" | V3 == "Insulin")
newdata3 <- newdata[1,]
newdata2$V1 <- NULL
newdata2$V2 <- NULL
newdata2$V3 <- NULL
newdata3$V1 <- NULL
newdata3$V2 <- NULL
newdata3$V3 <- NULL
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="min",replacement=" "))
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="2hr",replacement="120"))
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="4hr",replacement="240"))
newdata4 <- rbind(newdata3, newdata2) # Combine the filtered dataset with the header of the antobodies names (names of the nodes in the network)
newdata4[newdata4 == "HUGO ID"] = "#NON"
split_newdata4 <- newdata4
#split_newdata4 <- newdata4[,20]# Working with a smaller dataset
e <- c("$", as.character("%"),"+", "-", ".","0","1","2","3","4","5","6","7","8","9", ":", ";", "?", "@","A","B","C","D","E","F","G","H","I","J","K", "L", "M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z", "_", "~") #All possible single characters working with the TS2B model
g <- c("NON", e[1:ncol(split_newdata4)-1])
#g <- c(i, "NON", e[1:ncol(split_newdata4)-1])# Control: Shows wether the loop works by putting (i) in the headerof the .txt-file
b <- (paste(g, collapse =" "))
c <- as.data.frame(b)
f <- rbind.fill(list(c,split_newdata4))
f[1,2] <- as.character(f[1,1])
f$b <- NULL
f[is.na(f)] <- ""
# delete duplicated measurements
#f2 <- f[!duplicated(f), ]
#Rearrange the data by the time
#h <- f[with(f, order(V4)),]
#h <-as.data.frame(sort(f$V4, decreasing=T))
#h <- f[3,order(f$V4)]
#ndx = order(f$V4, decreasing=T)
#f_sorted = f[ndx,]
#ifelse(!dir.exists("CSV2TXTOutput"), dir.create("CSV2TXTOutput"), "Folder exists already") # Creates a folder for the output
#write.table(f, file = paste(i,".txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
write.table(f,paste(d,i,Sys.time(),sep = ".","txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
#remove("f")
#f[FALSE,]
#print (f)
}
}
}
####CSV to TXT-Parser####by Nina Kersten
#This R-Parser converts a .csv-file of a RPMA-Output to a .txt-file for inferring a boolean network with TS2B
#Up to 48 nodes can be calculated
#R version 3.4.3 (2017-11-30)
#install.packages("plyr")
#install.packages("data.table") #data.table_1.9.5
#install.packages("dplyr")
#install.packages("rPython")
library(plyr)
library(rPython)
library(RJSONIO)
#library(dplyr)
#library(data.table)
#>>>pip install praw :for using rPython
#ifelse(interactive()==FALSE,
#       askdir<- ask,
#       askdir <- readline(prompt="Please enter the directory to the ./CSV -folder:")
#)
#askdir <-function(){
#  toString(readline("Please enter the directory to the ./CSV -folder:"))
#}
#input_askdir <- askdir()
#print(input_askdir)
#askdir2 <-function(){
#  toString(readline("Please enter the directory to the ./CSV -folder:"))
#}
#input_askdir2 <- askdir2()
#print(input_askdir)
myfunction <- function(askdir, askdir2){
askdir <- readline(prompt = "Please enter the directory to the ./CSV -folder:")
askdir2<- readline(prompt = "Please enter the directory to the ./CSV -folder:")
if(askir = FALSE && askdir2 = FALSE){
print("Something is missing!Please check your input")
}else{
#/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/Pipeline/CSV/
#python.load("/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/Pipeline/rPythonscript.py")
#system('python /home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/Pipeline/rPythonscript.py', wait = FALSE)
#askdir2 <- readline(prompt = "Please enter the directory to the \"./TS2B/BooleanModeling2post/\" -folder  :")
#"/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/"
setwd(askdir2)
celllinelist <- c("BT20_main","BT549_main","MCF7_main","UACC812_main")
#read-in the data, exlude SlideID, Antibody Name
for (d in celllinelist){
newdata <- read.csv(file=paste(askdir,d,".csv", sep=""), header=FALSE, skip = 2, sep = ",", dec = ".", stringsAsFactors = FALSE)
stimulilist<- c("Insulin", "IGF1", "FGF1", "EGF", "HGF" , "Serum", "NRG1" , "PBS") # List of all stimuli (pertubation parameter) used in the experiments in each cell line
for (i in stimulilist){
newdata2 <- subset(newdata, newdata$V4 == "0min" | newdata$V3 == i) # filter out the measurements of one cell line in combination with the 0-measurements and one of the pertubation parameters
#newdata2 <- newdata[match(stimulilist, newdata), ]
#newdata2 <- subset(newdata, newdata$V3 %in% stimulilist | newdata$V4== "0min")
#newdata$V3 <- rownames(newdata)
#newdata2 <- subset(newdata, V4 == "0min" | V3 == "Insulin")
newdata3 <- newdata[1,]
newdata2$V1 <- NULL
newdata2$V2 <- NULL
newdata2$V3 <- NULL
newdata3$V1 <- NULL
newdata3$V2 <- NULL
newdata3$V3 <- NULL
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="min",replacement=" "))
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="2hr",replacement="120"))
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="4hr",replacement="240"))
newdata4 <- rbind(newdata3, newdata2) # Combine the filtered dataset with the header of the antobodies names (names of the nodes in the network)
newdata4[newdata4 == "HUGO ID"] = "#NON"
split_newdata4 <- newdata4
#split_newdata4 <- newdata4[,20]# Working with a smaller dataset
e <- c("$", as.character("%"),"+", "-", ".","0","1","2","3","4","5","6","7","8","9", ":", ";", "?", "@","A","B","C","D","E","F","G","H","I","J","K", "L", "M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z", "_", "~") #All possible single characters working with the TS2B model
g <- c("NON", e[1:ncol(split_newdata4)-1])
#g <- c(i, "NON", e[1:ncol(split_newdata4)-1])# Control: Shows wether the loop works by putting (i) in the headerof the .txt-file
b <- (paste(g, collapse =" "))
c <- as.data.frame(b)
f <- rbind.fill(list(c,split_newdata4))
f[1,2] <- as.character(f[1,1])
f$b <- NULL
f[is.na(f)] <- ""
# delete duplicated measurements
#f2 <- f[!duplicated(f), ]
#Rearrange the data by the time
#h <- f[with(f, order(V4)),]
#h <-as.data.frame(sort(f$V4, decreasing=T))
#h <- f[3,order(f$V4)]
#ndx = order(f$V4, decreasing=T)
#f_sorted = f[ndx,]
#ifelse(!dir.exists("CSV2TXTOutput"), dir.create("CSV2TXTOutput"), "Folder exists already") # Creates a folder for the output
#write.table(f, file = paste(i,".txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
write.table(f,paste(d,i,Sys.time(),sep = ".","txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
#remove("f")
#f[FALSE,]
#print (f)
}
}
}
}
rm(askdir)
rm(askdir2)
myfunction <- function(askdir, askdir2){
askdir <- readline(prompt = "Please enter the directory to the ./CSV -folder:")
askdir2<- readline(prompt = "Please enter the directory to the ./CSV -folder:")
if(askdir = FALSE && askdir2 = FALSE){
print("Something is missing!Please check your input")
}else{
#/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/Pipeline/CSV/
#python.load("/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/Pipeline/rPythonscript.py")
#system('python /home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/Pipeline/rPythonscript.py', wait = FALSE)
#askdir2 <- readline(prompt = "Please enter the directory to the \"./TS2B/BooleanModeling2post/\" -folder  :")
#"/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/"
setwd(askdir2)
celllinelist <- c("BT20_main","BT549_main","MCF7_main","UACC812_main")
#read-in the data, exlude SlideID, Antibody Name
for (d in celllinelist){
newdata <- read.csv(file=paste(askdir,d,".csv", sep=""), header=FALSE, skip = 2, sep = ",", dec = ".", stringsAsFactors = FALSE)
stimulilist<- c("Insulin", "IGF1", "FGF1", "EGF", "HGF" , "Serum", "NRG1" , "PBS") # List of all stimuli (pertubation parameter) used in the experiments in each cell line
for (i in stimulilist){
newdata2 <- subset(newdata, newdata$V4 == "0min" | newdata$V3 == i) # filter out the measurements of one cell line in combination with the 0-measurements and one of the pertubation parameters
#newdata2 <- newdata[match(stimulilist, newdata), ]
#newdata2 <- subset(newdata, newdata$V3 %in% stimulilist | newdata$V4== "0min")
#newdata$V3 <- rownames(newdata)
#newdata2 <- subset(newdata, V4 == "0min" | V3 == "Insulin")
newdata3 <- newdata[1,]
newdata2$V1 <- NULL
newdata2$V2 <- NULL
newdata2$V3 <- NULL
newdata3$V1 <- NULL
newdata3$V2 <- NULL
newdata3$V3 <- NULL
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="min",replacement=" "))
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="2hr",replacement="120"))
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="4hr",replacement="240"))
newdata4 <- rbind(newdata3, newdata2) # Combine the filtered dataset with the header of the antobodies names (names of the nodes in the network)
newdata4[newdata4 == "HUGO ID"] = "#NON"
split_newdata4 <- newdata4
#split_newdata4 <- newdata4[,20]# Working with a smaller dataset
e <- c("$", as.character("%"),"+", "-", ".","0","1","2","3","4","5","6","7","8","9", ":", ";", "?", "@","A","B","C","D","E","F","G","H","I","J","K", "L", "M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z", "_", "~") #All possible single characters working with the TS2B model
g <- c("NON", e[1:ncol(split_newdata4)-1])
#g <- c(i, "NON", e[1:ncol(split_newdata4)-1])# Control: Shows wether the loop works by putting (i) in the headerof the .txt-file
b <- (paste(g, collapse =" "))
c <- as.data.frame(b)
f <- rbind.fill(list(c,split_newdata4))
f[1,2] <- as.character(f[1,1])
f$b <- NULL
f[is.na(f)] <- ""
# delete duplicated measurements
#f2 <- f[!duplicated(f), ]
#Rearrange the data by the time
#h <- f[with(f, order(V4)),]
#h <-as.data.frame(sort(f$V4, decreasing=T))
#h <- f[3,order(f$V4)]
#ndx = order(f$V4, decreasing=T)
#f_sorted = f[ndx,]
#ifelse(!dir.exists("CSV2TXTOutput"), dir.create("CSV2TXTOutput"), "Folder exists already") # Creates a folder for the output
#write.table(f, file = paste(i,".txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
write.table(f,paste(d,i,Sys.time(),sep = ".","txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
#remove("f")
#f[FALSE,]
#print (f)
}
}
}
}
myfunction <- function(askdir, askdir2){
askdir <- readline(prompt = "Please enter the directory to the ./CSV -folder:")
askdir2<- readline(prompt = "Please enter the directory to the ./CSV -folder:")
if(askdir = FALSE | askdir2 = FALSE){
print("Something is missing!Please check your input")
}else{
#/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/Pipeline/CSV/
#python.load("/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/Pipeline/rPythonscript.py")
#system('python /home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/Pipeline/rPythonscript.py', wait = FALSE)
#askdir2 <- readline(prompt = "Please enter the directory to the \"./TS2B/BooleanModeling2post/\" -folder  :")
#"/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/"
setwd(askdir2)
celllinelist <- c("BT20_main","BT549_main","MCF7_main","UACC812_main")
#read-in the data, exlude SlideID, Antibody Name
for (d in celllinelist){
newdata <- read.csv(file=paste(askdir,d,".csv", sep=""), header=FALSE, skip = 2, sep = ",", dec = ".", stringsAsFactors = FALSE)
stimulilist<- c("Insulin", "IGF1", "FGF1", "EGF", "HGF" , "Serum", "NRG1" , "PBS") # List of all stimuli (pertubation parameter) used in the experiments in each cell line
for (i in stimulilist){
newdata2 <- subset(newdata, newdata$V4 == "0min" | newdata$V3 == i) # filter out the measurements of one cell line in combination with the 0-measurements and one of the pertubation parameters
#newdata2 <- newdata[match(stimulilist, newdata), ]
#newdata2 <- subset(newdata, newdata$V3 %in% stimulilist | newdata$V4== "0min")
#newdata$V3 <- rownames(newdata)
#newdata2 <- subset(newdata, V4 == "0min" | V3 == "Insulin")
newdata3 <- newdata[1,]
newdata2$V1 <- NULL
newdata2$V2 <- NULL
newdata2$V3 <- NULL
newdata3$V1 <- NULL
newdata3$V2 <- NULL
newdata3$V3 <- NULL
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="min",replacement=" "))
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="2hr",replacement="120"))
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="4hr",replacement="240"))
newdata4 <- rbind(newdata3, newdata2) # Combine the filtered dataset with the header of the antobodies names (names of the nodes in the network)
newdata4[newdata4 == "HUGO ID"] = "#NON"
split_newdata4 <- newdata4
#split_newdata4 <- newdata4[,20]# Working with a smaller dataset
e <- c("$", as.character("%"),"+", "-", ".","0","1","2","3","4","5","6","7","8","9", ":", ";", "?", "@","A","B","C","D","E","F","G","H","I","J","K", "L", "M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z", "_", "~") #All possible single characters working with the TS2B model
g <- c("NON", e[1:ncol(split_newdata4)-1])
#g <- c(i, "NON", e[1:ncol(split_newdata4)-1])# Control: Shows wether the loop works by putting (i) in the headerof the .txt-file
b <- (paste(g, collapse =" "))
c <- as.data.frame(b)
f <- rbind.fill(list(c,split_newdata4))
f[1,2] <- as.character(f[1,1])
f$b <- NULL
f[is.na(f)] <- ""
# delete duplicated measurements
#f2 <- f[!duplicated(f), ]
#Rearrange the data by the time
#h <- f[with(f, order(V4)),]
#h <-as.data.frame(sort(f$V4, decreasing=T))
#h <- f[3,order(f$V4)]
#ndx = order(f$V4, decreasing=T)
#f_sorted = f[ndx,]
#ifelse(!dir.exists("CSV2TXTOutput"), dir.create("CSV2TXTOutput"), "Folder exists already") # Creates a folder for the output
#write.table(f, file = paste(i,".txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
write.table(f,paste(d,i,Sys.time(),sep = ".","txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
#remove("f")
#f[FALSE,]
#print (f)
}
}
}
}
cat("Please enter the directory to the ./CSV/ -folder:")
#R version 3.4.3 (2017-11-30)
#install.packages("plyr")
#install.packages("data.table") #data.table_1.9.5
#install.packages("rockchalk")
library(plyr)
library(rockchalk)
cat("Please enter the directory to the ./CSV/ -folder:")
/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/Pipeline/CSV/
#R version 3.4.3 (2017-11-30)
#install.packages("plyr")
#install.packages("data.table") #data.table_1.9.5
#install.packages("rockchalk")
library(plyr)
library(rockchalk)
cat("Please enter the directory to the ./CSV/ -folder:")
/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/Pipeline/CSV/
cat("Please enter the directory to the ./CSV/ -folder:")
"/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/Pipeline/CSV/"
cat("Please enter the directory to the ./TS2B/BooleanModeling2post/ -folder:")
"/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/"
path <- setwd(fil2)
celllinelist <- c("BT20_main","BT549_main","MCF7_main","UACC812_main")
#read-in the data, exlude SlideID, Antibody Name
for (d in celllinelist){
newdata <- read.csv(file=paste(fil,d,".csv", sep=""), header=FALSE, skip = 2, sep = ",", dec = ".", stringsAsFactors = FALSE)
stimulilist<- c("Insulin", "IGF1", "FGF1", "EGF", "HGF" , "Serum", "NRG1" , "PBS") # List of all stimuli (pertubation parameter) used in the experiments in each cell line
for (i in stimulilist){
newdata2 <- subset(newdata, newdata$V4 == "0min" | newdata$V3 == i) # filter out the measurements of one cell line in combination with the 0-measurements and one of the pertubation parameters
#newdata2 <- newdata[match(stimulilist, newdata), ]
#newdata2 <- subset(newdata, newdata$V3 %in% stimulilist | newdata$V4== "0min")
#newdata$V3 <- rownames(newdata)
#newdata2 <- subset(newdata, V4 == "0min" | V3 == "Insulin")
newdata3 <- newdata[1,]
newdata2$V1 <- NULL
newdata2$V2 <- NULL
newdata2$V3 <- NULL
newdata3$V1 <- NULL
newdata3$V2 <- NULL
newdata3$V3 <- NULL
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="min",replacement=" "))
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="2hr",replacement="120"))
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="4hr",replacement="240"))
newdata4 <- rbind(newdata3, newdata2) # Combine the filtered dataset with the header of the antobodies names (names of the nodes in the network)
newdata4[newdata4 == "HUGO ID"] = "#NON"
split_newdata4 <- newdata4
#split_newdata4 <- newdata4[,20]# Working with a smaller dataset
e <- c("$", as.character("%"),"+", "-", ".","0","1","2","3","4","5","6","7","8","9", ":", ";","<",">","?", "@","A","B","C","D","E","F","G","H","I","J","K", "L", "M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","_","`","~") #All possible single characters working with the TS2B model
g <- c("NON", e[1:ncol(split_newdata4)-1])
#g <- c(i, "NON", e[1:ncol(split_newdata4)-1])# Control: Shows wether the loop works by putting (i) in the headerof the .txt-file
b <- (paste(g, collapse =" "))
c <- as.data.frame(b)
f <- rbind.fill(list(c,split_newdata4))
f[1,2] <- as.character(f[1,1])
f$b <- NULL
f[is.na(f)] <- ""
# delete duplicated measurements
#f2 <- f[!duplicated(f), ]
#Rearrange the data by the time
#h <- f[with(f, order(V4)),]
#h <-as.data.frame(sort(f$V4, decreasing=T))
#h <- f[3,order(f$V4)]
#ndx = order(f$V4, decreasing=T)
#f_sorted = f[ndx,]
#ifelse(!dir.exists("CSV2TXTOutput"), dir.create("CSV2TXTOutput"), "Folder exists already") # Creates a folder for the output
#write.table(f, file = paste(i,".txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
write.table(f,paste(d,i,sep = "",".txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
}
}
cat("Please enter the directory to the ./CSV/ -folder:")
/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/Pipeline/CSV/
cat("Please enter the directory to the ./CSV/ -folder:")
//home//nina//Schreibtisch//Masterarbeit//Algorithmen//TS2B//BooleanModeling2post//Pipeline//CSV//
cat("Please enter the directory to the ./CSV/ -folder:")
"/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/Pipeline/CSV/"
file()
fil
print(fil)
cat("Please enter the directory to the ./CSV/ -folder:")
"//home//nina//Schreibtisch//Masterarbeit//Algorithmen//TS2B//BooleanModeling2post//Pipeline//CSV//"
celllinelist <- c("BT20_main","BT549_main","MCF7_main","UACC812_main")
#read-in the data, exlude SlideID, Antibody Name
for (d in celllinelist){
newdata <- read.csv(file=paste(fil,d,".csv", sep=""), header=FALSE, skip = 2, sep = ",", dec = ".", stringsAsFactors = FALSE)
stimulilist<- c("Insulin", "IGF1", "FGF1", "EGF", "HGF" , "Serum", "NRG1" , "PBS") # List of all stimuli (pertubation parameter) used in the experiments in each cell line
for (i in stimulilist){
newdata2 <- subset(newdata, newdata$V4 == "0min" | newdata$V3 == i) # filter out the measurements of one cell line in combination with the 0-measurements and one of the pertubation parameters
#newdata2 <- newdata[match(stimulilist, newdata), ]
#newdata2 <- subset(newdata, newdata$V3 %in% stimulilist | newdata$V4== "0min")
#newdata$V3 <- rownames(newdata)
#newdata2 <- subset(newdata, V4 == "0min" | V3 == "Insulin")
newdata3 <- newdata[1,]
newdata2$V1 <- NULL
newdata2$V2 <- NULL
newdata2$V3 <- NULL
newdata3$V1 <- NULL
newdata3$V2 <- NULL
newdata3$V3 <- NULL
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="min",replacement=" "))
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="2hr",replacement="120"))
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="4hr",replacement="240"))
newdata4 <- rbind(newdata3, newdata2) # Combine the filtered dataset with the header of the antobodies names (names of the nodes in the network)
newdata4[newdata4 == "HUGO ID"] = "#NON"
split_newdata4 <- newdata4
#split_newdata4 <- newdata4[,20]# Working with a smaller dataset
e <- c("$", as.character("%"),"+", "-", ".","0","1","2","3","4","5","6","7","8","9", ":", ";","<",">","?", "@","A","B","C","D","E","F","G","H","I","J","K", "L", "M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","_","`","~") #All possible single characters working with the TS2B model
g <- c("NON", e[1:ncol(split_newdata4)-1])
#g <- c(i, "NON", e[1:ncol(split_newdata4)-1])# Control: Shows wether the loop works by putting (i) in the headerof the .txt-file
b <- (paste(g, collapse =" "))
c <- as.data.frame(b)
f <- rbind.fill(list(c,split_newdata4))
f[1,2] <- as.character(f[1,1])
f$b <- NULL
f[is.na(f)] <- ""
# delete duplicated measurements
#f2 <- f[!duplicated(f), ]
#Rearrange the data by the time
#h <- f[with(f, order(V4)),]
#h <-as.data.frame(sort(f$V4, decreasing=T))
#h <- f[3,order(f$V4)]
#ndx = order(f$V4, decreasing=T)
#f_sorted = f[ndx,]
#ifelse(!dir.exists("CSV2TXTOutput"), dir.create("CSV2TXTOutput"), "Folder exists already") # Creates a folder for the output
#write.table(f, file = paste(i,".txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
write.table(f,paste(d,i,sep = "",".txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
}
}
#R version 3.4.3 (2017-11-30)
#install.packages("plyr")
#install.packages("data.table") #data.table_1.9.5
#install.packages("rockchalk")
library(plyr)
cat("Please enter the directory to the ./CSV/ -folder:")
#setwd("/home/nina/Schreibtisch/Masterarbeit/")
#/home/nina/Schreibtisch/Masterarbeit/
#reading .txt-file with a variable number of coloumns
no_col <- max(count.fields("/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/Pipeline/TS2B_output/output.txt", sep = " "))
boolean2bnet <- read.table("/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/Pipeline/TS2B_output/output.txt",sep=" ",fill=TRUE,header = F,stringsAsFactors = FALSE, col.names=c(1:no_col))
View(boolean2bnet)
end_bool <- which(boolean2bnet[,1] == "Solution")# search the position of "solution"
start_bool <- end_bool +1 # go to the position of the error value
best_bool_number <- which.min(start_bool) #From all positions where an error value occures take the min error and its position
# Take the start of the new file at the best min errors position till the next solution found occurence
best_bool <- boolean2bnet[start_bool[best_bool_number]:end_bool[best_bool_number+1],]
View(best_bool)
View(best_bool)
View(boolean2bnet)
# Delete unnecessary rows
deletelist <- c("Cycle","Reached","Solution")
best_bool <- best_bool[!grepl("Cycle", best_bool[,1]),]
best_bool <- best_bool[!grepl("Reached", best_bool[,1]),]
best_bool <- best_bool[!grepl("Solution", best_bool[,1]),]
best_bool <- best_bool[-1,]
best_bool <- best_bool[!grepl("False", best_bool[,3]),]
boolean2bnet2<- best_bool[!grepl("True", best_bool[,3]),]
boolean2bnet2[boolean2bnet2 == "and"] = as.character("&")
boolean2bnet2[boolean2bnet2 == "or"] = "|"
boolean2bnet2[boolean2bnet2 == "not"] = as.character("!")
boolean2bnet2[boolean2bnet2 == "="] = ","
#Read in the CSV2TXT validated outputfile such that the protein's names can be added to the boolean rules
name2node <- read.table("/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/Pipeline/CSV2TXT_output/BT20_mainEGF.txt", fill= TRUE, header= FALSE, stringsAsFactors = FALSE, comment.char = "")
#Transform the protein's names into a vector
name2node2 <- as.character(as.vector(name2node[2,-1]))
#Create a vector of all possible character's encoding a protein (limited by TS2B in /boolean2/tokenizer.py)
symbollist <- c("$", as.character("%"),"+", "-", ".","0","1","2","3","4","5","6","7","8","9", ":", ";","<",">","?", "@","A","B","C","D","E","F","G","H","I","J","K", "L", "M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","_","`","~") #All possible single characters working with the TS2B model
symbollist2 <- c("$*", as.character("%*"),"+*", "-*", ".*","0*","1*","2*","3*","4*","5*","6*","7*","8*","9*", ":*", ";*","<*",">*","?*", "@*","A*","B*","C*","D*","E*","F*","G*","H*","I*","J*","K*", "L*", "M*","N*","O*","P*","Q*","R*","S*","T*","U*","V*","W*","X*","Y*","Z*","_*","`*","~*") #All possible single characters  with "*" working with the TS2B model
for (i in symbollist){
for (j in symbollist2){
boolean2bnet2[boolean2bnet2 == i] = as.character(name2node2[which(symbollist == i)])
boolean2bnet2[boolean2bnet2 == j] = as.character(name2node2[which(symbollist2 == j)])
}
}
View(name2node)
View(boolean2bnet2)
#In case of PyBoolNet: Replace all "." in a protein's name by "_", because in PyBoolNet "." in a protein's name cause trouble
boolean2bnet2 <- as.data.frame(sapply(boolean2bnet2,gsub,pattern="\\.",replacement="__"))
setwd("/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/Pipeline/PyBoolNet-2.2.5")
write.table(boolean2bnet2, file = "output2.bnet", quote = FALSE, row.names=FALSE, col.names = FALSE, sep = " ")

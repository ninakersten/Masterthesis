*******Creating an insilico network*******(Written by Nina Kersten,2018)

This content provides a insilico.bash script to create boolean networks with different amount of nodes considering different inference alorithms (REVEAL, BESTFIT, FULLFIT) in combination with different discretization algorithms (k-means clustering and BASCA). After inferring the networks the interaction graphs are genrated (without dependecies) and compared regarding the Recall, Precision, Accuracy, Balanced Accuracy and the Matthew Correlation Coefficient.


************* INSTALLATION REQUIREMENTS ***************
In order to be able to execute the code you need:
1. Python 2.7, Python 3.4
2. Python bitarray package (http://pypi.python.org/pypi/bitarray)
3. boolean2 package associated with Booleannet modeling tool (http://code.google.com/p/booleannet/)
4. PyCluster (https://anaconda.org/bioconda/pycluster)
5. PyBoolNet 2.2.5 (https://github.com/hklarner/PyBoolNet/releases)

************* RUNNING INSTRUCTIONS ********************

Download the folder "Pipeline_insilico". Open a terminal and go the directory of the folder:

./Pipeline_insilico$ bash insilico.sh
./Pipeline_insilico$ What is the maximum number of nodes an insilico network should have? Start at least by a value of 5 ! (e.g.10)

#Then you type at the value of 5, such that at least one .bnet file is generated. For example: A value of 10, yields a set of .bnet files from 4 nodes up to 9 nodes.


Depending on the inference method, used in the bash-script it is recommanded to take not more than 15 nodes for the method REVEAL and not more than 48 nodes for BESTFIT and FULLFIT! BASCA is much slower than the k-means-clustering algorithm, such that itis recommanded to use the k-means clustering with a depth of at least 3.

Validating the inference instrusctions, can be done in the bash script as follows:


bin-method: defines the binarization method and/or argument associated with it. 'A' means BASC A binarization. Any positive number above 0 (1 or higher) will produce iterative k-means binarization with this depth (KM1, KM2, KM3, etc). KM3 binarizatin is the most efficient one.
	
learn-method: one of the three - REVEAL (default), BESTFIT, FULLFIT
	
maxscore: is a float value (0.0 is default). Determines what is the maximum allowed score for appropriate solution. If the best score if less than 'maxscore' is reached before maximum iterations (defined by search), the search stops.
	
solutions: determines how many solutions you want to find in this run (those solutions will either be have 'maxscore' or will have executed for defined number of iterations without reaching that score)




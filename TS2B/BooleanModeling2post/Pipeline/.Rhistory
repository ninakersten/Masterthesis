newdata3$V1 <- NULL
newdata3$V2 <- NULL
newdata3$V3 <- NULL
newdata2[newdata2 == "5min"] = 5
newdata2[newdata2 == "10min"] = 10
newdata2[newdata2 == "15min"] = 15
newdata2[newdata2 == "30min"] = 30
newdata2[newdata2 == "60min"] = 60
newdata2[newdata2 == "2hr"] = 120
newdata2[newdata2 == "4hr"] = 240
#Verbinde wieder newdata2 mit newdata3:
newdata4 <- rbind(newdata3, newdata2)
View(newdata4)
newdata2[newdata2 == "0min"] = 0
newdata2[newdata2 == "5min"] = 5
newdata2[newdata2 == "10min"] = 10
newdata2[newdata2 == "15min"] = 15
newdata2[newdata2 == "30min"] = 30
newdata2[newdata2 == "60min"] = 60
newdata2[newdata2 == "2hr"] = 120
newdata2[newdata2 == "4hr"] = 240
#Verbinde wieder newdata2 mit newdata3:
newdata4 <- rbind(newdata3, newdata2)
View(newdata4)
names(newdata4)[1] <- "NON"
newdata4[newdata4 == "HUGO ID"] = "#NON"
#split_newdata4$V5[[1]] #Returns the value at a certain position in a dataframe
split_newdata5 <- split_newdata4[rep(1:nrow(split_newdata4),each=2),]
split_newdata4 <- newdata4[,1:24]	# Hälfte der Tabelle um mit kleineren Datensatz zu üben.
#split_newdata4$V5[[1]] #Returns the value at a certain position in a dataframe
split_newdata5 <- split_newdata4[rep(1:nrow(split_newdata4),each=2),]
View(split_newdata4)
View(split_newdata5)
split_newdata5$NON[[1]] = "NON" #Replace "#NON" by "NON"
split_newdata5[1,1:ncol(split_newdata5)] = "A":"Z"
alphabet(split_newdata5[1,1:ncol(split_newdata5)])
LETTERS(split_newdata5[1,1:ncol(split_newdata5)])
LETTERS{split_newdata5[1,1:ncol(split_newdata5)]}
LETTERS[seq(split_newdata5[1,1:ncol(split_newdata5)])]
LETTERS[seq(split_newdata5[1,2:ncol(split_newdata5)])]
s <- LETTERS[seq(split_newdata5[1,2:ncol(split_newdata5)])]
s <- LETTERS[split_newdata5[1,2:ncol(split_newdata5)]]
split_newdata5[split_newdata5 == "p"] = letters
data.frame(as.list(split_newdata5))
data.frame(s)
View(split_newdata5)
write.table(split_newdata5, file = "/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/CSV2TXT.txt", quote = FALSE, row.names=FALSE, col.names = TRUE)
write.table(split_newdata5, file = "/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/CSV2TXT.txt", quote = FALSE, row.names=FALSE, col.names = FALSE)
write.table(s, file = "/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/CSV2TXT.txt", quote = FALSE, row.names=FALSE, col.names = FALSE)
s <- read.table(file="/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/CSV2TXT.txt", fill= TRUE, header = T)
View(s)
write.table(s, file = "/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/CSV2TXT.txt", quote = FALSE, row.names=FALSE, col.names = FALSE)
s <- read.table(file="/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/CSV2TXT.txt", fill= TRUE, header = F)
View(s)
s <- LETTERS[seq(split_newdata5[1,2:ncol(split_newdata5)])]
write.table(s, file = "/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/CSV2TXT.txt", quote = FALSE, row.names=FALSE, col.names = FALSE)
newdata3 <- read.table(file="/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/CSV2TXT.txt", fill= TRUE, header = F, stringsAsFactors = FALSE)
s
write.table(s, file = "/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/CSV2TXT.txt", quote = FALSE, row.names=FALSE, col.names = FALSE)
newdata3 <- read.table(file="/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/CSV2TXT.txt", fill= TRUE, header = F, stringsAsFactors = FALSE)
write.table(s, file = "/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/CSV2TXT.txt", quote = FALSE, row.names=FALSE, col.names = FALSE)
newdata3 <- read.table(file="/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/CSV2TXT.txt", fill= TRUE, header = F)
t(newdata3)
s <- t(newdata3)
View(s)
Data <- InsertRow(split_newdata5, NewRow = s, RowNum = 1)
install.packages("miscTools")
library(miscTools)
Data <- InsertRow(split_newdata5, NewRow = s, RowNum = 1)
Data <- insertRow(split_newdata5, NewRow = s, RowNum = 1)
Data <- insertRow(split_newdata5, 1, NewRow = s, RowNum = 1)
Data <- insertRow(split_newdata5, 1, NewRow)
Data <- rbind(s, split_newdata5)
s <- "NON" ++ LETTERS[seq(split_newdata5[1,2:ncol(split_newdata5)])]
s <- "NON" ++ LETTERS[seq(split_newdata5[1,2:ncol(split_newdata5)])]
s <- "NON" && LETTERS[seq(split_newdata5[1,2:ncol(split_newdata5)])]
write.table(s, file = "/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/CSV2TXT.txt", quote = FALSE, row.names=FALSE, col.names = FALSE)
newdata3 <- read.table(file="/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/CSV2TXT.txt", fill= TRUE, header = T)
# add "NON" in first entry to get the same dimension as split_newdata5
x <- t(newdata3)
View(x)
# Replace ID by "A-Z" in the first row of the data frame
a <- paste(s, split_newdata5)
s <- LETTERS[seq(split_newdata5[1,2:ncol(split_newdata5)])]
write.table(s, file = "/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/CSV2TXT.txt", quote = FALSE, row.names=FALSE, col.names = FALSE)
newdata3 <- read.table(file="/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/CSV2TXT.txt", fill= TRUE, header = F)
# add "NON" in first entry to get the same dimension as split_newdata5
x <- t(newdata3)
View(x)
x["my new column"] <- NA
# add "NON" in first entry to get the same dimension as split_newdata5
x <- t(newdata3)
Data <- rbind(x, split_newdata5)
x["my new column"] <- NA
# add "NON" in first entry to get the same dimension as split_newdata5
x <- t(newdata3)
# add "NON" in first entry to get the same dimension as split_newdata5
x <- x["my new column"] <- NA
x <- t(newdata3)
x$my_new_column <- x$1 - x$2
x[c("NON")] <- NA
x[c("NON")] <- "NON"
x[c("NON"),x] <- "NON"
x[c("NON",x)] <- "NON"
newdata3 <- read.table(file="/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/CSV2TXT.txt", fill= TRUE, header = F)
# add "NON" in first entry to get the same dimension as split_newdata5
#x <- x["my_new_column"] <- NA
x[c("NON")] <- "NON"
x <- t(newdata3)
s <- LETTERS[seq(split_newdata5[1,2:ncol(split_newdata5)])]
z <- "NON"
# Replace ID by "A-Z" in the first row of the data frame
a <- paste(s,z, sep = "", collapse = NULL)
a
# Replace ID by "A-Z" in the first row of the data frame
a <- paste(z,s, sep = "", collapse = NULL)
a
# Replace ID by "A-Z" in the first row of the data frame
a <- c(z,s, sep = "", collapse = NULL)
a
# Replace ID by "A-Z" in the first row of the data frame
a <- c(z,s)
a
write.table(s, file = "/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/CSV2TXT.txt", quote = FALSE, row.names=FALSE, col.names = FALSE)
newdata3 <- read.table(file="/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/CSV2TXT.txt", fill= TRUE, header = F)
View(x)
x <- t(newdata3)
Data <- rbind(x, split_newdata5)
write.table(a, file = "/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/CSV2TXT.txt", quote = FALSE, row.names=FALSE, col.names = FALSE)
newdata3 <- read.table(file="/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/CSV2TXT.txt", fill= TRUE, header = F)
View(newdata3)
x <- t(newdata3)
Data <- rbind(x, split_newdata5)
Data <- c(x, split_newdata5)
View(Data)
write.table(Data, file = "/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/CSV2TXT.txt", quote = FALSE, row.names=FALSE, col.names = FALSE)
newdata3 <- read.table(file="/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/CSV2TXT.txt", fill= TRUE, header = F)
View(newdata3)
# Replace ID by "A-Z" in the first row of the data frame
a <- c("NON",LETTERS[seq(split_newdata5[1,2:ncol(split_newdata5)])])
a
write.table(a, file = "/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/CSV2TXT.txt", quote = FALSE, row.names=FALSE, col.names = FALSE)
newdata3 <- read.table(file="/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/CSV2TXT.txt", fill= TRUE, header = F)
View(newdata3)
# add "NON" in first entry to get the same dimension as split_newdata5
x <- t(newdata3)
View(newdata3)
# add "NON" in first entry to get the same dimension as split_newdata5
x <- t(newdata3)
View(x)
# add "NON" in first entry to get the same dimension as split_newdata5
t(newdata3)
# add "NON" in first entry to get the same dimension as split_newdata5
x <- t(newdata3)
View(x)
View(split_newdata5)
Data <- rbind(split_newdata5, x)
split_newdata5 <- unname(split_newdata5)
Data <- rbind(split_newdata5, x)
#function(file.csv){
#read-in the data, exlude SlideID, Antibody Name
newdata <- read.csv(file="/home/nina/Schreibtisch/Masterarbeit/DREAM8-Breast-Cancer/Training data/experimental/experimental/CSV/BT20_main.csv", header=FALSE, skip = 2, sep = ",", dec = ".", stringsAsFactors = FALSE)
#filter all measurements with the FGF1-stimuli
#newdata2 <- dplyr::filter(newdata, newdata[,3] == "FGF1")
newdata2 <- subset(newdata, V4 == "0min" | V3 == "FGF1") # Filter for all "0min" and "FGF1" entries
end_CSV <- which(newdata2[,3] == "FGF1") # gibt alle positionen wieder wo ein "FGF1" steht
newdata3 <- newdata2[newdata2[1:end_CSV +1],] # nimmt nur den Teil auf dem data frame, der bin "FGF1" endet
#newdata2 <- dplyr::filter(newdata, newdata[,3] == "Insulin")
#newdata2 <- dplyr::filter(newdata, newdata[,3] == "IGF1")
#newdata2 <- dplyr::filter(newdata, newdata[,3] == "EGF")
#newdata2 <- dplyr::filter(newdata, newdata[,3] == "HGF")
#newdata2 <- dplyr::filter(newdata, newdata[,3] == "Serum")
#newdata2 <- dplyr::filter(newdata, newdata[,3] == "NRG1")
#newdata2 <- dplyr::filter(newdata, newdata[,3] == "PBS")
newdata3 <- newdata[1,]
newdata2$V1 <- NULL
newdata2$V2 <- NULL
newdata2$V3 <- NULL
newdata3$V1 <- NULL
newdata3$V2 <- NULL
newdata3$V3 <- NULL
newdata2[newdata2 == "0min"] = 0
newdata2[newdata2 == "5min"] = 5
newdata2[newdata2 == "10min"] = 10
newdata2[newdata2 == "15min"] = 15
newdata2[newdata2 == "30min"] = 30
newdata2[newdata2 == "60min"] = 60
newdata2[newdata2 == "2hr"] = 120
newdata2[newdata2 == "4hr"] = 240
#Verbinde wieder newdata2 mit newdata3:
newdata4 <- rbind(newdata3, newdata2)
View(newdata4)
names(newdata4)[1] <- "NON"
newdata4[newdata4 == "HUGO ID"] = "#NON"
split_newdata4 <- newdata4[,1:24]	# Hälfte der Tabelle um mit kleineren Datensatz zu üben.
#split_newdata4$V5[[1]] #Returns the value at a certain position in a dataframe
split_newdata5 <- split_newdata4[rep(1:nrow(split_newdata4),each=2),]
split_newdata5$NON[[1]] = "NON" #Replace "#NON" by "NON"
View(split_newdata4)
View(split_newdata5)
View(split_newdata4)
View(split_newdata5)
View(split_newdata5)
#function(file.csv){
#read-in the data, exlude SlideID, Antibody Name
newdata <- read.csv(file="/home/nina/Schreibtisch/Masterarbeit/DREAM8-Breast-Cancer/Training data/experimental/experimental/CSV/BT20_main.csv", header=FALSE, skip = 2, sep = ",", dec = ".", stringsAsFactors = FALSE)
#filter all measurements with the FGF1-stimuli
#newdata2 <- dplyr::filter(newdata, newdata[,3] == "FGF1")
newdata2 <- subset(newdata, V4 == "0min" | V3 == "FGF1") # Filter for all "0min" and "FGF1" entries
end_CSV <- which(newdata2[,3] == "FGF1") # gibt alle positionen wieder wo ein "FGF1" steht
newdata3 <- newdata2[newdata2[1:end_CSV +1],] # nimmt nur den Teil auf dem data frame, der bin "FGF1" endet
#newdata2 <- dplyr::filter(newdata, newdata[,3] == "Insulin")
#newdata2 <- dplyr::filter(newdata, newdata[,3] == "IGF1")
#newdata2 <- dplyr::filter(newdata, newdata[,3] == "EGF")
#newdata2 <- dplyr::filter(newdata, newdata[,3] == "HGF")
#newdata2 <- dplyr::filter(newdata, newdata[,3] == "Serum")
#newdata2 <- dplyr::filter(newdata, newdata[,3] == "NRG1")
#newdata2 <- dplyr::filter(newdata, newdata[,3] == "PBS")
newdata3 <- newdata[1,]
newdata2$V1 <- NULL
newdata2$V2 <- NULL
newdata2$V3 <- NULL
newdata3$V1 <- NULL
newdata3$V2 <- NULL
newdata3$V3 <- NULL
View(newdata3)
newdata2[newdata2 == "0min"] = 0
newdata2[newdata2 == "5min"] = 5
newdata2[newdata2 == "10min"] = 10
newdata2[newdata2 == "15min"] = 15
newdata2[newdata2 == "30min"] = 30
newdata2[newdata2 == "60min"] = 60
newdata2[newdata2 == "2hr"] = 120
newdata2[newdata2 == "4hr"] = 240
#Verbinde wieder newdata2 mit newdata3:
newdata4 <- rbind(newdata3, newdata2)
View(newdata4)
names(newdata4)[1] <- "NON"
newdata4[newdata4 == "HUGO ID"] = "#NON"
split_newdata4 <- newdata4[,1:24]	# Hälfte der Tabelle um mit kleineren Datensatz zu üben.
View(split_newdata4)
# Replace ID by "A-Z" in the first row of the data frame
a <- c("NON",LETTERS[seq(split_newdata4[1,2:ncol(split_newdata5)])])
# Replace ID by "A-Z" in the first row of the data frame
a <- c("NON",LETTERS[seq(split_newdata4[1,2:ncol(split_newdata4)])])
a
write.table(a, file = "/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/CSV2TXT.txt", quote = FALSE, row.names=FALSE, col.names = FALSE)
newdata3 <- read.table(file="/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/CSV2TXT.txt", fill= TRUE, header = F)
View(newdata3)
# add "NON" in first entry to get the same dimension as split_newdata5
x <- t(newdata3)
split_newdata4 <- data.matrix(split_newdata4, rownames.force = NA)
Data <- rbind(split_newdata4, x)
View(Data)
View(split_newdata4)
View(newdata4)
View(newdata3)
View(newdata2)
View(newdata)
View(Data)
a
####CSV to TXT-Parser####by Nina Kersten
#This R-Parser converts a .csv-file of a RPMA-Output to a .txt-file for inferring a boolean network with TS2B
#Up to 48 nodes can be calculated
#R version 3.4.3 (2017-11-30)
#install.packages("plyr")
#install.packages("data.table") #data.table_1.9.5
#install.packages("dplyr")
library(plyr)
#library(dplyr)
#library(data.table)
setwd("/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/")
celllinelist <- c("BT20_main","BT549_main","MCF7_main","UACC812_main")
#read-in the data, exlude SlideID, Antibody Name
for (d in celllinelist){
newdata <- read.csv(file=paste("/home/nina/Schreibtisch/Masterarbeit/DREAM8-Breast-Cancer/Training data/experimental/experimental/CSV/",d,".csv"), header=FALSE, skip = 2, sep = ",", dec = ".", stringsAsFactors = FALSE)
stimulilist<- c("Insulin", "IGF1", "FGF1", "EGF", "HGF" , "Serum", "NRG1" , "PBS") # List of all stimuli (pertubation parameter) used in the experiments in each cell line
for (i in stimulilist){
newdata2 <- subset(newdata, newdata$V4 == "0min" | newdata$V3 == i) # filter out the measurements of one cell line in combination with the 0-measurements and one of the pertubation parameters
#newdata2 <- newdata[match(stimulilist, newdata), ]
#newdata2 <- subset(newdata, newdata$V3 %in% stimulilist | newdata$V4== "0min")
#newdata$V3 <- rownames(newdata)
#newdata2 <- subset(newdata, V4 == "0min" | V3 == "Insulin")
newdata3 <- newdata[1,]
newdata2$V1 <- NULL
newdata2$V2 <- NULL
newdata2$V3 <- NULL
newdata3$V1 <- NULL
newdata3$V2 <- NULL
newdata3$V3 <- NULL
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="min",replacement=" "))
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="2hr",replacement="120"))
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="4hr",replacement="240"))
newdata4 <- rbind(newdata3, newdata2) # Combine the filtered dataset with the header of the antobodies names (names of the nodes in the network)
newdata4[newdata4 == "HUGO ID"] = "#NON"
split_newdata4 <- newdata4
#split_newdata4 <- newdata4[,20]# Working with a smaller dataset
e <- c("$", as.character("%"),"+", "-", ".","0","1","2","3","4","5","6","7","8","9", ":", ";", "?", "@","A","B","C","D","E","F","G","H","I","J","K", "L", "M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z", "_", "~") #All possible single characters working with the TS2B model
g <- c("NON", e[1:ncol(split_newdata4)-1])
#g <- c(i, "NON", e[1:ncol(split_newdata4)-1])# Control: Shows wether the loop works by putting (i) in the headerof the .txt-file
b <- (paste(g, collapse =" "))
c <- as.data.frame(b)
f <- rbind.fill(list(c,split_newdata4))
f[1,2] <- as.character(f[1,1])
f$b <- NULL
f[is.na(f)] <- ""
# delete duplicated measurements
#f2 <- f[!duplicated(f), ]
#Rearrange the data by the time
#h <- f[with(f, order(V4)),]
#h <-as.data.frame(sort(f$V4, decreasing=T))
#h <- f[3,order(f$V4)]
#ndx = order(f$V4, decreasing=T)
#f_sorted = f[ndx,]
#ifelse(!dir.exists("CSV2TXTOutput"), dir.create("CSV2TXTOutput"), "Folder exists already") # Creates a folder for the output
#write.table(f, file = paste(i,".txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
write.table(f,paste(d,i,Sys.time(),sep = ".","txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
#remove("f")
#f[FALSE,]
#print (f)
}
}
####CSV to TXT-Parser####by Nina Kersten
#This R-Parser converts a .csv-file of a RPMA-Output to a .txt-file for inferring a boolean network with TS2B
#Up to 48 nodes can be calculated
#R version 3.4.3 (2017-11-30)
#install.packages("plyr")
#install.packages("data.table") #data.table_1.9.5
#install.packages("dplyr")
library(plyr)
#library(dplyr)
#library(data.table)
setwd("/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/")
celllinelist <- c("BT20_main","BT549_main","MCF7_main","UACC812_main")
#read-in the data, exlude SlideID, Antibody Name
for (d in celllinelist){
newdata <- read.csv(file=paste("/home/nina/Schreibtisch/Masterarbeit/DREAM8-Breast-Cancer/Training data/experimental/experimental/CSV/",d,".csv"), header=FALSE, skip = 2, dec = ".", stringsAsFactors = FALSE)
stimulilist<- c("Insulin", "IGF1", "FGF1", "EGF", "HGF" , "Serum", "NRG1" , "PBS") # List of all stimuli (pertubation parameter) used in the experiments in each cell line
for (i in stimulilist){
newdata2 <- subset(newdata, newdata$V4 == "0min" | newdata$V3 == i) # filter out the measurements of one cell line in combination with the 0-measurements and one of the pertubation parameters
#newdata2 <- newdata[match(stimulilist, newdata), ]
#newdata2 <- subset(newdata, newdata$V3 %in% stimulilist | newdata$V4== "0min")
#newdata$V3 <- rownames(newdata)
#newdata2 <- subset(newdata, V4 == "0min" | V3 == "Insulin")
newdata3 <- newdata[1,]
newdata2$V1 <- NULL
newdata2$V2 <- NULL
newdata2$V3 <- NULL
newdata3$V1 <- NULL
newdata3$V2 <- NULL
newdata3$V3 <- NULL
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="min",replacement=" "))
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="2hr",replacement="120"))
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="4hr",replacement="240"))
newdata4 <- rbind(newdata3, newdata2) # Combine the filtered dataset with the header of the antobodies names (names of the nodes in the network)
newdata4[newdata4 == "HUGO ID"] = "#NON"
split_newdata4 <- newdata4
#split_newdata4 <- newdata4[,20]# Working with a smaller dataset
e <- c("$", as.character("%"),"+", "-", ".","0","1","2","3","4","5","6","7","8","9", ":", ";", "?", "@","A","B","C","D","E","F","G","H","I","J","K", "L", "M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z", "_", "~") #All possible single characters working with the TS2B model
g <- c("NON", e[1:ncol(split_newdata4)-1])
#g <- c(i, "NON", e[1:ncol(split_newdata4)-1])# Control: Shows wether the loop works by putting (i) in the headerof the .txt-file
b <- (paste(g, collapse =" "))
c <- as.data.frame(b)
f <- rbind.fill(list(c,split_newdata4))
f[1,2] <- as.character(f[1,1])
f$b <- NULL
f[is.na(f)] <- ""
# delete duplicated measurements
#f2 <- f[!duplicated(f), ]
#Rearrange the data by the time
#h <- f[with(f, order(V4)),]
#h <-as.data.frame(sort(f$V4, decreasing=T))
#h <- f[3,order(f$V4)]
#ndx = order(f$V4, decreasing=T)
#f_sorted = f[ndx,]
#ifelse(!dir.exists("CSV2TXTOutput"), dir.create("CSV2TXTOutput"), "Folder exists already") # Creates a folder for the output
#write.table(f, file = paste(i,".txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
write.table(f,paste(d,i,Sys.time(),sep = ".","txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
#remove("f")
#f[FALSE,]
#print (f)
}
}
####CSV to TXT-Parser####by Nina Kersten
#This R-Parser converts a .csv-file of a RPMA-Output to a .txt-file for inferring a boolean network with TS2B
#Up to 48 nodes can be calculated
#R version 3.4.3 (2017-11-30)
#install.packages("plyr")
#install.packages("data.table") #data.table_1.9.5
#install.packages("dplyr")
library(plyr)
#library(dplyr)
#library(data.table)
setwd("/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/")
celllinelist <- c("BT20_main","BT549_main","MCF7_main","UACC812_main")
#read-in the data, exlude SlideID, Antibody Name
for (d in celllinelist){
newdata <- read.csv(file=paste("/home/nina/Schreibtisch/Masterarbeit/DREAM8-Breast-Cancer/Training data/experimental/experimental/CSV/",d,".csv", sep=""), header=FALSE, skip = 2, sep = ",", dec = ".", stringsAsFactors = FALSE)
stimulilist<- c("Insulin", "IGF1", "FGF1", "EGF", "HGF" , "Serum", "NRG1" , "PBS") # List of all stimuli (pertubation parameter) used in the experiments in each cell line
for (i in stimulilist){
newdata2 <- subset(newdata, newdata$V4 == "0min" | newdata$V3 == i) # filter out the measurements of one cell line in combination with the 0-measurements and one of the pertubation parameters
#newdata2 <- newdata[match(stimulilist, newdata), ]
#newdata2 <- subset(newdata, newdata$V3 %in% stimulilist | newdata$V4== "0min")
#newdata$V3 <- rownames(newdata)
#newdata2 <- subset(newdata, V4 == "0min" | V3 == "Insulin")
newdata3 <- newdata[1,]
newdata2$V1 <- NULL
newdata2$V2 <- NULL
newdata2$V3 <- NULL
newdata3$V1 <- NULL
newdata3$V2 <- NULL
newdata3$V3 <- NULL
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="min",replacement=" "))
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="2hr",replacement="120"))
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="4hr",replacement="240"))
newdata4 <- rbind(newdata3, newdata2) # Combine the filtered dataset with the header of the antobodies names (names of the nodes in the network)
newdata4[newdata4 == "HUGO ID"] = "#NON"
split_newdata4 <- newdata4
#split_newdata4 <- newdata4[,20]# Working with a smaller dataset
e <- c("$", as.character("%"),"+", "-", ".","0","1","2","3","4","5","6","7","8","9", ":", ";", "?", "@","A","B","C","D","E","F","G","H","I","J","K", "L", "M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z", "_", "~") #All possible single characters working with the TS2B model
g <- c("NON", e[1:ncol(split_newdata4)-1])
#g <- c(i, "NON", e[1:ncol(split_newdata4)-1])# Control: Shows wether the loop works by putting (i) in the headerof the .txt-file
b <- (paste(g, collapse =" "))
c <- as.data.frame(b)
f <- rbind.fill(list(c,split_newdata4))
f[1,2] <- as.character(f[1,1])
f$b <- NULL
f[is.na(f)] <- ""
# delete duplicated measurements
#f2 <- f[!duplicated(f), ]
#Rearrange the data by the time
#h <- f[with(f, order(V4)),]
#h <-as.data.frame(sort(f$V4, decreasing=T))
#h <- f[3,order(f$V4)]
#ndx = order(f$V4, decreasing=T)
#f_sorted = f[ndx,]
#ifelse(!dir.exists("CSV2TXTOutput"), dir.create("CSV2TXTOutput"), "Folder exists already") # Creates a folder for the output
#write.table(f, file = paste(i,".txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
write.table(f,paste(d,i,Sys.time(),sep = ".","txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
#remove("f")
#f[FALSE,]
#print (f)
}
}
####CSV to TXT-Parser####by Nina Kersten
#This R-Parser converts a .csv-file of a RPMA-Output to a .txt-file for inferring a boolean network with TS2B
#Up to 48 nodes can be calculated
#R version 3.4.3 (2017-11-30)
#install.packages("plyr")
#install.packages("data.table") #data.table_1.9.5
#install.packages("dplyr")
library(plyr)
#library(dplyr)
#library(data.table)
setwd("/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples")
celllinelist <- c("BT20_main","BT549_main","MCF7_main","UACC812_main")
#read-in the data, exlude SlideID, Antibody Name
for (d in celllinelist){
newdata <- read.csv(file=paste("/home/nina/Schreibtisch/Masterarbeit/DREAM8-Breast-Cancer/Training data/experimental/experimental/CSV",d,".csv", sep=""), header=FALSE, skip = 2, sep = ",", dec = ".", stringsAsFactors = FALSE)
stimulilist<- c("Insulin", "IGF1", "FGF1", "EGF", "HGF" , "Serum", "NRG1" , "PBS") # List of all stimuli (pertubation parameter) used in the experiments in each cell line
for (i in stimulilist){
newdata2 <- subset(newdata, newdata$V4 == "0min" | newdata$V3 == i) # filter out the measurements of one cell line in combination with the 0-measurements and one of the pertubation parameters
#newdata2 <- newdata[match(stimulilist, newdata), ]
#newdata2 <- subset(newdata, newdata$V3 %in% stimulilist | newdata$V4== "0min")
#newdata$V3 <- rownames(newdata)
#newdata2 <- subset(newdata, V4 == "0min" | V3 == "Insulin")
newdata3 <- newdata[1,]
newdata2$V1 <- NULL
newdata2$V2 <- NULL
newdata2$V3 <- NULL
newdata3$V1 <- NULL
newdata3$V2 <- NULL
newdata3$V3 <- NULL
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="min",replacement=" "))
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="2hr",replacement="120"))
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="4hr",replacement="240"))
newdata4 <- rbind(newdata3, newdata2) # Combine the filtered dataset with the header of the antobodies names (names of the nodes in the network)
newdata4[newdata4 == "HUGO ID"] = "#NON"
split_newdata4 <- newdata4
#split_newdata4 <- newdata4[,20]# Working with a smaller dataset
e <- c("$", as.character("%"),"+", "-", ".","0","1","2","3","4","5","6","7","8","9", ":", ";", "?", "@","A","B","C","D","E","F","G","H","I","J","K", "L", "M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z", "_", "~") #All possible single characters working with the TS2B model
g <- c("NON", e[1:ncol(split_newdata4)-1])
#g <- c(i, "NON", e[1:ncol(split_newdata4)-1])# Control: Shows wether the loop works by putting (i) in the headerof the .txt-file
b <- (paste(g, collapse =" "))
c <- as.data.frame(b)
f <- rbind.fill(list(c,split_newdata4))
f[1,2] <- as.character(f[1,1])
f$b <- NULL
f[is.na(f)] <- ""
# delete duplicated measurements
#f2 <- f[!duplicated(f), ]
#Rearrange the data by the time
#h <- f[with(f, order(V4)),]
#h <-as.data.frame(sort(f$V4, decreasing=T))
#h <- f[3,order(f$V4)]
#ndx = order(f$V4, decreasing=T)
#f_sorted = f[ndx,]
#ifelse(!dir.exists("CSV2TXTOutput"), dir.create("CSV2TXTOutput"), "Folder exists already") # Creates a folder for the output
#write.table(f, file = paste(i,".txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
write.table(f,paste(d,i,Sys.time(),sep = ".","txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
#remove("f")
#f[FALSE,]
#print (f)
}
}
install.packages("reticulate")
install.packages("Matrix")
#install.packages("Matrix")
#install.packages("reticulate")
install.packages("llapack")
install.packages("lblas")
install.packages("lgfortran")

#function(file.csv){
#read-in the data, exlude SlideID, Antibody Name
newdata <- read.csv(file="/home/nina/Schreibtisch/Masterarbeit/DREAM8-Breast-Cancer/Training data/experimental/experimental/CSV/BT20_main.csv", header=FALSE, skip = 2, sep = ",", dec = ".", stringsAsFactors = FALSE)
#filter all measurements with the FGF1-stimuli
#newdata2 <- dplyr::filter(newdata, newdata[,3] == "FGF1")
newdata2 <- subset(newdata, V4 == "0min" | V3 == "FGF1") # Filter for all "0min" and "FGF1" entries
end_CSV <- which(newdata2[,3] == "FGF1") # gibt alle positionen wieder wo ein "FGF1" steht
newdata3 <- newdata2[newdata2[1:end_CSV +1],] # nimmt nur den Teil auf dem data frame, der bin "FGF1" endet
#newdata2 <- dplyr::filter(newdata, newdata[,3] == "Insulin")
#newdata2 <- dplyr::filter(newdata, newdata[,3] == "IGF1")
#newdata2 <- dplyr::filter(newdata, newdata[,3] == "EGF")
#newdata2 <- dplyr::filter(newdata, newdata[,3] == "HGF")
#newdata2 <- dplyr::filter(newdata, newdata[,3] == "Serum")
#newdata2 <- dplyr::filter(newdata, newdata[,3] == "NRG1")
#newdata2 <- dplyr::filter(newdata, newdata[,3] == "PBS")
newdata3 <- newdata[1,]
newdata2$V1 <- NULL
newdata2$V2 <- NULL
newdata2$V3 <- NULL
newdata3$V1 <- NULL
newdata3$V2 <- NULL
newdata3$V3 <- NULL
View(newdata3)
newdata2[newdata2 == "0min"] = 0
newdata2[newdata2 == "5min"] = 5
newdata2[newdata2 == "10min"] = 10
newdata2[newdata2 == "15min"] = 15
newdata2[newdata2 == "30min"] = 30
newdata2[newdata2 == "60min"] = 60
newdata2[newdata2 == "2hr"] = 120
newdata2[newdata2 == "4hr"] = 240
#Verbinde wieder newdata2 mit newdata3:
newdata4 <- rbind(newdata3, newdata2)
View(newdata4)
names(newdata4)[1] <- "NON"
newdata4[newdata4 == "HUGO ID"] = "#NON"
split_newdata4 <- newdata4[,1:24]	# Hälfte der Tabelle um mit kleineren Datensatz zu üben.
View(split_newdata4)
# Replace ID by "A-Z" in the first row of the data frame
a <- c("NON",LETTERS[seq(split_newdata4[1,2:ncol(split_newdata5)])])
# Replace ID by "A-Z" in the first row of the data frame
a <- c("NON",LETTERS[seq(split_newdata4[1,2:ncol(split_newdata4)])])
a
write.table(a, file = "/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/CSV2TXT.txt", quote = FALSE, row.names=FALSE, col.names = FALSE)
newdata3 <- read.table(file="/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/CSV2TXT.txt", fill= TRUE, header = F)
View(newdata3)
# add "NON" in first entry to get the same dimension as split_newdata5
x <- t(newdata3)
split_newdata4 <- data.matrix(split_newdata4, rownames.force = NA)
Data <- rbind(split_newdata4, x)
View(Data)
View(split_newdata4)
View(newdata4)
View(newdata3)
View(newdata2)
View(newdata)
View(Data)
a
mybiglist[1]
mybiglist[[1]]
mybiglist[[1,1]]
setwd("/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/")
bnet_data <- read.table("output2.bnet", fill= TRUE, header= FALSE, stringsAsFactors = FALSE, sep = " ")
proteinlist <- c(bnet_data[,1])
bnet_subdata <- bnet_data[,3:ncol(bnet_data)]
mybiglist <- list()
for (protein in proteinlist){
indexlist <- which(bnet_subdata == protein, arr.ind=TRUE)
#name <- paste(protein,":",sep=" ")
mybiglist[[name]] <- indexlist
mybiglist[[]] <- indexlist
#print(index)
#dir.create("/BnetData")
#write.table(indexlist,paste(protein,sep = ".","txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
}
s <-bnet_subdata[mybiglist[[1,1],mybiglist[[1,2]-1]]
mybiglist[proteinlist[1]]
proteinlist[1]
setwd("/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/")
bnet_data <- read.table("output2.bnet", fill= TRUE, header= FALSE, stringsAsFactors = FALSE, sep = " ")
proteinlist <- c(bnet_data[,1])
bnet_subdata <- bnet_data[,3:ncol(bnet_data)]
mybiglist <- list()
for (protein in proteinlist){
indexlist <- which(bnet_subdata == protein, arr.ind=TRUE)
name <- paste(protein)
mybiglist[[name]] <- indexlist
#print(index)
#dir.create("/BnetData")
#write.table(indexlist,paste(protein,sep = ".","txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
}
View(mybiglist)
mybiglist[proteinlist[1]]
s <- mybiglist[proteinlist[1]]
s[1,]
View(s)
s[[1,]]
View(s)
s[["EIF4EBP1_pT37_pT46"]]
t<- s[["EIF4EBP1_pT37_pT46"]]
t[1,]
index <- bnet_subdata[t[1,],t[,1]]
View(bnet_subdata)
index <- bnet_subdata[t[1,1],t[1,2]]
View(s)
View(t)
index <- bnet_subdata[t[1,1],t[1,2]-1]
View(index)
setwd("/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/")
bnet_data <- read.table("output2.bnet", fill= TRUE, header= FALSE, stringsAsFactors = FALSE, sep = " ")
proteinlist <- c(bnet_data[,1])
bnet_subdata <- bnet_data[,3:ncol(bnet_data)]
mybiglist <- list()
for (protein in proteinlist){
indexlist <- which(bnet_subdata == protein, arr.ind=TRUE)
name <- paste(protein)
mybiglist[[name]] <- indexlist
#print(index)
#dir.create("/BnetData")
#write.table(indexlist,paste(protein,sep = ".","txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
}
s<-mybiglist[protein[1]]
t<-s[["EIF4EBP1_pT37_pT46"]]
index<-bnet_subdata[t[1,1],t[1,2]-1]
if (index == "!"){
write.table(paste(protein[1],"-1",sep= " "),file="bnet2sif.sif", row.names = FALSE, col.names = FALSE, sep = "\n")
}else if (index == "&"| index == "|" | index == "," | index == " "){
write.table(paste(protein[1],"1",sep= " "),file="bnet2sif.sif", row.names = FALSE, col.names = FALSE, sep = "\n")
}
index<-bnet_subdata[t[2,1],t[2,2]-1]
View(index)
View(s)
mybiglist[["EIF4EBP1_pT37_pT46 :"]]
mybiglist[["EIF4EBP1_pT37_pT46 :"]]
setwd("/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/")
bnet_data <- read.table("output2.bnet", fill= TRUE, header= FALSE, stringsAsFactors = FALSE, sep = " ")
proteinlist <- c(bnet_data[,1])
bnet_subdata <- bnet_data[,3:ncol(bnet_data)]
mybiglist <- list()
for (protein in proteinlist){
indexlist <- which(bnet_subdata == protein, arr.ind=TRUE)
name <- paste(protein)
mybiglist[[name]] <- indexlist
#print(index)
#dir.create("/BnetData")
#write.table(indexlist,paste(protein,sep = ".","txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
}
View(mybiglist)
mybiglist[["EIF4EBP1_pT37_pT46 :"]]
setwd("/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/")
bnet_data <- read.table("output2.bnet", fill= TRUE, header= FALSE, stringsAsFactors = FALSE, sep = " ")
proteinlist <- c(bnet_data[,1])
bnet_subdata <- bnet_data[,3:ncol(bnet_data)]
mybiglist <- list()
for (protein in proteinlist){
indexlist <- which(bnet_subdata == protein, arr.ind=TRUE)
name <- paste(protein,":",sep=" ")
mybiglist[[name]] <- indexlist
#print(index)
#dir.create("/BnetData")
#write.table(indexlist,paste(protein,sep = ".","txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
}
View(mybiglist)
mybiglist[["EIF4EBP1_pT37_pT46 :"]]
s<-mybiglist[protein[1]]
View(s)
View(s)
s<-mybiglist[name]
View(s)
s<-mybiglist[[name]]
View(s)
setwd("/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/")
bnet_data <- read.table("output2.bnet", fill= TRUE, header= FALSE, stringsAsFactors = FALSE, sep = " ")
proteinlist <- c(bnet_data[,1])
bnet_subdata <- bnet_data[,3:ncol(bnet_data)]
mybiglist <- list()
for (protein in proteinlist){
indexlist <- which(bnet_subdata == protein, arr.ind=TRUE)
name <- paste(protein,":",sep=" ")
mybiglist[[name]] <- indexlist
s<-mybiglist[[name]]
for (j in 1:nrow(s)){
if ((bnet_subdata[t[j,1],t[j,2]-1]) == "!"){
print ("Inactive")
}else if ((bnet_subdata[t[j,1],t[j,2]-1]) == " "){
print ("aktive")
}
}
#dir.create("/BnetData")
#write.table(indexlist,paste(protein,sep = ".","txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
}
View(s)
View(indexlist)
View(s)
View(mybiglist)
View(s)
setwd("/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/")
bnet_data <- read.table("output2.bnet", fill= TRUE, header= FALSE, stringsAsFactors = FALSE, sep = " ")
proteinlist <- c(bnet_data[,1])
bnet_subdata <- bnet_data[,3:ncol(bnet_data)]
mybiglist <- list()
for (protein in proteinlist){
#indexlist <- which(bnet_subdata == protein, arr.ind=TRUE)
name <- paste(protein,":",sep=" ")
mybiglist[[name]] <- which(bnet_subdata == protein, arr.ind=TRUE)
#mybiglist[[name]] <- indexlist
s<-mybiglist[[name]]
#dir.create("/BnetData")
#write.table(indexlist,paste(protein,sep = ".","txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
}
View(mybiglist)
t<-s[["EIF4EBP1_pT37_pT46"]]
View(s)
setwd("/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/")
bnet_data <- read.table("output2.bnet", fill= TRUE, header= FALSE, stringsAsFactors = FALSE, sep = " ")
proteinlist <- c(bnet_data[,1])
bnet_subdata <- bnet_data[,3:ncol(bnet_data)]
mybiglist <- list()
for (protein in proteinlist){
#indexlist <- which(bnet_subdata == protein, arr.ind=TRUE)
name <- paste(protein,":",sep=" ")
mybiglist[[name]] <- which(bnet_subdata == protein, arr.ind=TRUE)
#mybiglist[[name]] <- indexlist
superlist<-mybiglist[[name]]
#dir.create("/BnetData")
#write.table(indexlist,paste(protein,sep = ".","txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
}
View(mybiglist)
View(superlist)
View(mybiglist)
mybiglist[1]
mybiglist[1,1]
mybiglist[[1,1]]
w<-mybiglist[1]
w[1,1]
View(mybiglist)
mybiglist[["EIF4EBP1_pT37_pT46 :"]]
mybiglist[[1]]
mybiglist[[1]][1,1]
index <- bnet_subdata[mybiglist[[1]][1:nrow(mybiglist[[1]]),],mybiglist[[1]][1:nrow(mybiglist[[1]]),]]
mybiglist[[1]][1,1]
mybiglist[[1]][1,2]
bnet_subdata[row, col]
row <- mybiglist[[1]][1,1]
col <- mybiglist[[1]][1,2]
bnet_subdata[row, col]
nrow(mybiglist[[1]])
row <- mybiglist[[1]][1:nrow(mybiglist[[1]]),1]
col <- mybiglist[[1]][1:nrow(mybiglist[[1]]),2]
bnet_subdata[row, col]
index <- bnet_subdata[row, col]
View(index)
col
row
setwd("/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/")
bnet_data <- read.table("output2.bnet", fill= TRUE, header= FALSE, stringsAsFactors = FALSE, sep = " ")
proteinlist <- c(bnet_data[,1])
bnet_subdata <- bnet_data[,3:ncol(bnet_data)]
mybiglist <- list()
for (protein in proteinlist){
#indexlist <- which(bnet_subdata == protein, arr.ind=TRUE)
name <- paste(protein,":",sep=" ")
mybiglist[[name]] <- which(bnet_subdata == protein, arr.ind=TRUE)
#mybiglist[[name]] <- indexlist
#superlist<-mybiglist[[name]]
#dir.create("/BnetData")
#write.table(indexlist,paste(protein,sep = ".","txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
}
for (j in mybiglist){
if ((bnet_subdata[mybiglist[[j]][1:nrow(mybiglist[[1]]),1], mybiglist[[j]][1:nrow(mybiglist[[1]]),2]]) == "!"){
print ("Inactive")
}else if ((bnet_subdata[mybiglist[[j]][1:nrow(mybiglist[[1]]),1], mybiglist[[j]][1:nrow(mybiglist[[1]]),2]]) == " "){
print ("aktive")
}
}
View(j)
View(mybiglist)
View(mybiglist)
mybiglist[j]
for (j in mybiglist[[]]){
if ((bnet_subdata[mybiglist[[j]][1:nrow(mybiglist[[1]]),1], mybiglist[[j]][1:nrow(mybiglist[[1]]),2]]) == "!"){
print ("Inactive")
}else if ((bnet_subdata[mybiglist[[j]][1:nrow(mybiglist[[1]]),1], mybiglist[[j]][1:nrow(mybiglist[[1]]),2]]) == " "){
print ("aktive")
}
}
mybiglist[[1]]
setwd("/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/")
bnet_data <- read.table("output2.bnet", fill= TRUE, header= FALSE, stringsAsFactors = FALSE, sep = " ")
proteinlist <- c(bnet_data[,1])
bnet_subdata <- bnet_data[,3:ncol(bnet_data)]
mybiglist <- list()
for (protein in proteinlist){
name <- paste(protein,":",sep=" ")
mybiglist[[name]] <- which(bnet_subdata == protein, arr.ind=TRUE)
#dir.create("/BnetData")
#write.table(indexlist,paste(protein,sep = ".","txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
}
for (j in mybiglist[[]]){
if ((bnet_subdata[j[1:nrow(j),1], j[1:nrow(j),2]]) == "!"){
print ("Inactive")
}else if ((bnet_subdata[j[1:nrow(j),1], j[1:nrow(j),2]]) == " "){
print ("aktive")
}
}
View(bnet_subdata)
View(mybiglist)
mybiglist[["EIF4EBP1_pT37_pT46 :"]]
row <- mybiglist[[1]][1:nrow(mybiglist[[1]]),1]
col <- mybiglist[[1]][1:nrow(mybiglist[[1]]),2]
index <- bnet_subdata[row, col]
View(index)
mybiglist[[i]]
setwd("/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/")
bnet_data <- read.table("output2.bnet", fill= TRUE, header= FALSE, stringsAsFactors = FALSE, sep = " ")
proteinlist <- c(bnet_data[,1])
bnet_subdata <- bnet_data[,3:ncol(bnet_data)]
mybiglist <- list()
for (protein in proteinlist){
name <- paste(protein,":",sep=" ")
mybiglist[[name]] <- which(bnet_subdata == protein, arr.ind=TRUE)
#dir.create("/BnetData")
#write.table(indexlist,paste(protein,sep = ".","txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
}
mybiglist[[1]]
mybiglist[[2]]
row2 <-row[1:nrow(mybiglist[[1]]),1]
row <- mybiglist[[2]][1:nrow(mybiglist[[1]]),1]
row2 <-row[1:nrow(mybiglist[[2]]),1]
row <- mybiglist[[2]]
row2 <-row[1:nrow(mybiglist[[2]]),1]
row2
View(row)
row2 <-row[1]
row2
col <- mybiglist[[2]]
col2 <- col[1]
col2
col
row <- mybiglist[[2]]
row2 <-row[1,]
col <- mybiglist[[2]]
col2 <- col[,1]
index <- bnet_subdata[row2, col2]
row1
row2
row <- mybiglist[[2]]
row2 <-row[1,1]
col <- mybiglist[[2]]
col2 <- col[1,2]
index <- bnet_subdata[row2, col2]
index <- bnet_subdata[row2, col2-1]
View(index)
col <- mybiglist[[2]]
col
row <- mybiglist[[2]]
row2 <-row[7,1]
col <- mybiglist[[2]]
col2 <- col[7,2]
index <- bnet_subdata[row2, col2-1]
#Example without a loop:
choice <- mybiglist[[2]]
row2 <-choice[7,1]
col2 <- choice[7,2]
index <- bnet_subdata[row2, col2-1]
View(choice)
View(bnet_subdata)
View(bnet_data)
View(bnet_subdata)
mybiglist <- list()
for (protein in proteinlist){
name <- paste(protein,":",sep=" ")
mybiglist[[name]] <- which(bnet_subdata == protein, arr.ind=TRUE)
print(name)
#dir.create("/BnetData")
#write.table(indexlist,paste(protein,sep = ".","txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
}
View(choice)
mybiglist[1]
for(i in mybiglist[[]]){
print (i)
}
for(i in mybiglist[]){
print (i)
}
View(i)
for(i in mybiglist[]){
for (j in i){
print (j)
}
}
for(i in mybiglist[]){
for (j in i[]){
print (j)
}
}
for (j in i){
print (j)
}
View(mybiglist)
View(mybiglist)
mybiglist[1]
#Example without a loop:
choice <- mybiglist[[2]]
View(choice)
####CSV to TXT-Parser####by Nina Kersten
#This R-Parser converts a .csv-file of a RPMA-Output to a .txt-file for inferring a boolean network with TS2B
#Up to 48 nodes can be calculated
#R version 3.4.3 (2017-11-30)
#install.packages("plyr")
#install.packages("data.table") #data.table_1.9.5
#install.packages("dplyr")
library(plyr)
#library(dplyr)
#library(data.table)
setwd("/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/")
#read-in the data, exlude SlideID, Antibody Name
newdata <- read.csv(file="/home/nina/Schreibtisch/Masterarbeit/DREAM8-Breast-Cancer/Training data/experimental/experimental/CSV/BT549_main.csv", header=FALSE, skip = 2, sep = ",", dec = ".", stringsAsFactors = FALSE)
stimulilist<- c("Insulin", "IGF1", "FGF1", "EGF", "HGF" , "Serum", "NRG1" , "PBS") # List of all stimuli (pertubation parameter) used in the experiments in each cell line
for (i in stimulilist){
newdata2 <- subset(newdata, newdata$V4 == "0min" | newdata$V3 == i) # filter out the measurements of one cell line in combination with the 0-measurements and one of the pertubation parameters
#newdata2 <- newdata[match(stimulilist, newdata), ]
#newdata2 <- subset(newdata, newdata$V3 %in% stimulilist | newdata$V4== "0min")
#newdata$V3 <- rownames(newdata)
#newdata2 <- subset(newdata, V4 == "0min" | V3 == "Insulin")
newdata3 <- newdata[1,]
newdata2$V1 <- NULL
newdata2$V2 <- NULL
newdata2$V3 <- NULL
newdata3$V1 <- NULL
newdata3$V2 <- NULL
newdata3$V3 <- NULL
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="min",replacement=" "))
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="2hr",replacement="120"))
newdata2 <- as.data.frame(sapply(newdata2,gsub,pattern="4hr",replacement="240"))
newdata4 <- rbind(newdata3, newdata2) # Combine the filtered dataset with the header of the antobodies names (names of the nodes in the network)
newdata4[newdata4 == "HUGO ID"] = "#NON"
split_newdata4 <- newdata4
#split_newdata4 <- newdata4[,20]# Working with a smaller dataset
e <- c("$", as.character("%"),"+", "-", ".","0","1","2","3","4","5","6","7","8","9", ":", ";", "?", "@","A","B","C","D","E","F","G","H","I","J","K", "L", "M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z", "_", "~") #All possible single characters working with the TS2B model
g <- c("NON", e[1:ncol(split_newdata4)-1])
#g <- c(i, "NON", e[1:ncol(split_newdata4)-1])# Control: Shows wether the loop works by putting (i) in the headerof the .txt-file
b <- (paste(g, collapse =" "))
c <- as.data.frame(b)
f <- rbind.fill(list(c,split_newdata4))
f[1,2] <- as.character(f[1,1])
f$b <- NULL
f[is.na(f)] <- ""
# delete duplicated measurements
#f2 <- f[!duplicated(f), ]
#Rearrange the data by the time
#h <- f[with(f, order(V4)),]
#h <-as.data.frame(sort(f$V4, decreasing=T))
#h <- f[3,order(f$V4)]
#ndx = order(f$V4, decreasing=T)
#f_sorted = f[ndx,]
#ifelse(!dir.exists("CSV2TXTOutput"), dir.create("CSV2TXTOutput"), "Folder exists already") # Creates a folder for the output
#write.table(f, file = paste(i,".txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
write.table(f,paste(i,sep = ".","txt"), sep="\t", quote = FALSE, row.names=FALSE, col.names = FALSE)
#remove("f")
#f[FALSE,]
#print (f)
}
View(f)
###### Boolean Model (TS2B-output) to .bnet-file format-Parser####written by Nina Kersten 2018
#R version 3.4.3 (2017-11-30)
#install.packages("utils")
#install.packages("rPython")
#library (utils)
#library (rPython)
#run python tool to create networks
#python.load("BESTFIT.py")
#python BinInfer.py input=/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/cellCycle.txt bin-method=KM3 learn-method=BESTFIT maxscore=0.05 solutions=3 > output.txt
setwd("/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/")
#reading .txt-file with a variable number of coloumns
no_col <- max(count.fields("output.txt", sep = " "))
boolean2bnet <- read.table("output.txt",sep=" ",fill=TRUE,header = F,stringsAsFactors = FALSE, col.names=c(1:no_col))
end_bool <- which(boolean2bnet[,1] == "Solution")# search the position of "solution"
start_bool <- end_bool +1 # go to the position of the error value
best_bool_number <- which.min(start_bool) #From all positions where an error value occures take the min error and its position
# Take the start of the new file at the best min errors position till the next solution found occurence
best_bool <- boolean2bnet[start_bool[best_bool_number]:end_bool[best_bool_number+1],]
# Delete unnecessary rows
deletelist <- c("Cycle","Reached","Solution")
best_bool <- best_bool[!grepl("Cycle", best_bool[,1]),]
best_bool <- best_bool[!grepl("Reached", best_bool[,1]),]
best_bool <- best_bool[!grepl("Solution", best_bool[,1]),]
best_bool <- best_bool[-1,]
best_bool <- best_bool[!grepl("False", best_bool[,3]),]
boolean2bnet2<- best_bool[!grepl("True", best_bool[,3]),]
# Replace boolean expressions
boolean2bnet2[boolean2bnet2 == "and"] = as.character("&")
boolean2bnet2[boolean2bnet2 == "or"] = "|"
boolean2bnet2[boolean2bnet2 == "not"] = as.character("!")
boolean2bnet2[boolean2bnet2 == "="] = ","
#Read in the CSV2TXT validated outputfile such that the protein's names can be added to the boolean rules
name2node <- read.table("/home/nina/Schreibtisch/Masterarbeit/Algorithmen/TS2B/BooleanModeling2post/examples/PBS.txt", fill= TRUE, header= FALSE, stringsAsFactors = FALSE, comment.char = "")
#Transform the protein's names into a vector
name2node2 <- as.character(as.vector(name2node[2,-1]))
#Create a vector of all possible character's encoding a protein (limited by TS2B in /boolean2/tokenizer.py)
symbollist <- c("$", as.character("%"),"+", "-", ".","0","1","2","3","4","5","6","7","8","9", ":", ";", "?", "@","A","B","C","D","E","F","G","H","I","J","K", "L", "M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z", "_", "~") #All possible single characters working with the TS2B model
symbollist2 <- c("$*", as.character("%*"),"+*", "-*", ".*","0*","1*","2*","3*","4*","5*","6*","7*","8*","9*", ":*", ";*", "?*", "@*","A*","B*","C*","D*","E*","F*","G*","H*","I*","J*","K*", "L*", "M*","N*","O*","P*","Q*","R*","S*","T*","U*","V*","W*","X*","Y*","Z*", "_*", "~*") #All possible single characters  with "*" working with the TS2B model
for (i in symbollist){
for (j in symbollist2){
boolean2bnet2[boolean2bnet2 == i] = as.character(name2node2[which(symbollist == i)])
boolean2bnet2[boolean2bnet2 == j] = as.character(name2node2[which(symbollist2 == j)])
}
}
#In case of PyBoolNet: Replace all "." in a protein's name by "_", because in PyBoolNet "." in a protein's name cause trouble
#new <- as.data.frame(sapply(boolean2bnet2,gsub,pattern="\\.",replacement="_"))
#write.table(new, file = "output2.bnet", quote = FALSE, row.names=FALSE, col.names = FALSE, sep = " ")
write.table(boolean2bnet2, file = "output2.bnet", quote = FALSE, row.names=FALSE, col.names = FALSE, sep = " ")
